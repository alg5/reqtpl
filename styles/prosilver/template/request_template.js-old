// Avoid conflicts with other libraries
(function ($) {
	$(document).ready(function () {
		$('#reqtpl_attach_moved').appendTo($('#attach-panel'));
	});
	// showInterval by LavIgor
	var showInterval = 350;
	function bind_close_reqtpl(e) {
		if (e.keyCode == 27) reqtpl_close();
	}
	$('#reqtpl_btn').on('click', function (e) {
		e.preventDefault();
		$('#attach-panel > div:not(#reqtpl_attach_moved)').hide().appendTo('#reqtpl_attachments').show();
		$('#reqtpl_block').fadeIn(showInterval);
		$('#reqtpl_main').show();
		$('#reqtpl_main_inner').slideDown(showInterval);
		$('#reqtpl_attach_moved').slideDown(showInterval);
		$(document).on('keyup', bind_close_reqtpl);
	});
	// Cancel Click function (Anvar, bb3.mobi)
	function reqtpl_close() {
		$('#reqtpl_attach_moved').slideUp(showInterval);
		$('#reqtpl_attachments > div').slideUp(showInterval, function () {
			$(this).appendTo($('#attach-panel')).slideDown(showInterval);
		});
		$('#reqtpl_main_inner').slideUp(showInterval, function () {
			$('#reqtpl_main').hide();
		});
		$('#reqtpl_block').fadeOut(showInterval);
		$(document).off('keyup', bind_close_reqtpl);
	}
	$('#reqtpl_btn_cancel, #reqtpl_main').on('click', reqtpl_close);
	$('#reqtpl_main_inner').on('click', function (e) {
		e.stopPropagation();
	}).on('keyup', function (e) {
	});
	$('#reqtpl_btn_submit').on('click', function (e) {
		e.preventDefault();
		var b = validate();
		if (b) {
			append();
			reqtpl_close();
		}
	});
	function validate() {
		console.log(fields);
		for (field_id in fields) {
			if (!fields.hasOwnProperty(field_id)) continue;
			var field = fields[field_id];
			var control = document.getElementById(field);
			var _val = $(control).val();
			if (important[field]) {
				if ((control.tagName == 'INPUT' && control.type == 'checkbox' && !control.checked) || (_val.length == 0)) {
					$('.error', control.parentNode).html('<br />' + lang[1]);
					$(control).click(function () {
						$('.error', this.parentNode).html('');
					});
					return false;
				}
			}
			if (typeof (regexps[field]) != 'undefined' && regexps[field].length > 0) {
				var r = new RegExp(regexps[field], 'ig');
				if (!r.test(_val)) {
					$('.error', control.parentNode).html('<br />' + lang[3]);
					$(control).click(function () {
						$('.error', this.parentNode).html('');
					});
					return false;
				}
			}
		};
		return true;
	}
	function append() {
		var _output = reqtpl_title;
		$(fields).each(function () {
			var control = document.getElementById(this);
			var _val;
			var _pattern = patterns[this];

			if (control.tagName == 'SELECT') {
				_val = $('option:selected', control).text();
			} else {
				_val = $(control).val();
			}
			if (control.tagName == 'INPUT' && control.type == 'checkbox') {
				_output += ((_output) ? "\r\n" : '') + _pattern.replace('%s', (control.checked) ? lang[4] : lang[5]);
			} else {
				if (control.id.startsWith('reqtpl_image')) {
					$('#' + control.id + '_container .img_field').each(function () {
						if ($('input', this).val()) {
							_output += ((_output) ? "\r\n" : '') + _pattern.replace('%s', $('input', this).val());
							if ($('textarea', this).val()) {
								_output += ((_output) ? "\r\n" : '') + '[i]' + $('textarea', this).val() + '[/i]';
							}
						}
					});
				} else {
					_output += ((_output) ? "\r\n" : '') + _pattern.replace('%s', _val);
				}
			}
		});
		insert_text(_output + "\r\n");
		return true;
	}
	function changeEnable(statusEnabled) {
		if (statusEnabled) {
			$('body').children().prop('disabled', false);
		}
		else {
			$('body').children().prop('disabled', true);
		}
	}
	String.prototype.startsWith = function (str) { return (this.match("^" + str) == str) };
})(jQuery);